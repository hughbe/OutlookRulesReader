import XCTest
import MAPI
@testable import OutlookRulesReader

final class ImportConditionTests: XCTestCase {
    func testFromCondition() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xCB, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x6A, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x15, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0x0B, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0xFE, 0x39, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x6E,
                0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.fromCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is AddressParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as!AddressParameter
            XCTAssertEqual(1, condition.values.count)
            XCTAssertEqual(6, condition.values[0].count)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, condition.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual("name", condition.values[0][PropertyId.tagDisplayName.rawValue] as! String)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, condition.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, condition.values[0][PropertyId.tagSearchKey.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, condition.values[0][PropertyId.tagEntryId.rawValue] as! UInt32)
            XCTAssertEqual(1, condition.values[0][PropertyId.tagRecipientType.rawValue] as! UInt32)
        }
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x03, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xCB, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0xA1, 0x02, 0x00, 0x00, 0x03,
                0x00, 0x15, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x01, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x00, 0x00, 0x00, 0x1E, 0x01, 0x00, 0x00, 0x1F,
                0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x01, 0x0B, 0x30, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0x0A,
                0x00, 0xFE, 0x39, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x13, 0x3A, 0x00, 0x00, 0x00, 0x00, 0xC9, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x03, 0x30, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                0x00, 0xFE, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x01, 0x01, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x91, 0x02, 0x00, 0x00, 0x46,
                0x00, 0x69, 0x00, 0x72, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D,
                0x00, 0x65, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x64, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x65,
                0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x61,
                0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20,
                0x00, 0x53, 0x00, 0x75, 0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x78, 0x00, 0x20, 0x00, 0x28,
                0x00, 0x42, 0x00, 0x75, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73,
                0x00, 0x20, 0x00, 0x46, 0x00, 0x61, 0x00, 0x78, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xFE, 0x42, 0xAA, 0x0A, 0x18, 0xC7, 0x1A, 0x10, 0xE8, 0x85, 0x0B, 0x65, 0x1C, 0x24, 0x00,
                0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xDA, 0x07, 0x29, 0x9D, 0xAF, 0x5C, 0x4A, 0xB2, 0x0C, 0x8B,
                0x81, 0xA7, 0x8C, 0x96, 0xC0, 0x07, 0x00, 0xB2, 0xA9, 0x7E, 0x6D, 0x73, 0xAB, 0x95, 0x4D, 0xBB,
                0x15, 0x55, 0xC1, 0x54, 0x72, 0xFC, 0xB1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xB2,
                0xA9, 0x7E, 0x6D, 0x73, 0xAB, 0x95, 0x4D, 0xBB, 0x15, 0x55, 0xC1, 0x54, 0x72, 0xFC, 0xB1, 0x00,
                0x00, 0x00, 0x00, 0x38, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x41, 0x00, 0x58, 0x00,
                0x00, 0x00, 0x46, 0x41, 0x58, 0x3A, 0x46, 0x49, 0x52, 0x53, 0x54, 0x20, 0x4E, 0x41, 0x4D, 0x45,
                0x20, 0x4D, 0x49, 0x44, 0x44, 0x4C, 0x45, 0x20, 0x4E, 0x41, 0x4D, 0x45, 0x20, 0x4C, 0x41, 0x53,
                0x54, 0x20, 0x4E, 0x41, 0x4D, 0x45, 0x20, 0x53, 0x55, 0x46, 0x46, 0x49, 0x58, 0x40, 0x2B, 0x33,
                0x20, 0x28, 0x34, 0x29, 0x20, 0x35, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x72, 0x00, 0x73, 0x00,
                0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4D, 0x00,
                0x69, 0x00, 0x64, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00,
                0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x61, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00,
                0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x53, 0x00, 0x75, 0x00, 0x66, 0x00,
                0x66, 0x00, 0x69, 0x00, 0x78, 0x00, 0x40, 0x00, 0x2B, 0x00, 0x33, 0x00, 0x20, 0x00, 0x28, 0x00,
                0x34, 0x00, 0x29, 0x00, 0x20, 0x00, 0x35, 0x00, 0x20, 0x00, 0x00, 0x00, 0x46, 0x00, 0x69, 0x00,
                0x72, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00,
                0x20, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x64, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00,
                0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x61, 0x00, 0x73, 0x00,
                0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x53, 0x00,
                0x75, 0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x78, 0x00, 0x40, 0x00, 0x2B, 0x00, 0x33, 0x00,
                0x20, 0x00, 0x28, 0x00, 0x34, 0x00, 0x29, 0x00, 0x20, 0x00, 0x35, 0x00, 0x20, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x6A, 0x00, 0x00, 0x00, 0x03, 0x00, 0x15, 0x0C,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x01, 0x30,
                0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0xFF, 0x0F,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x02, 0x30,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x0B, 0x30,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0xFE, 0x39,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x61, 0x00,
                0x6D, 0x00, 0x65, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.fromCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is AddressParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as!AddressParameter
            XCTAssertEqual(2, condition.values.count)
            XCTAssertEqual(11, condition.values[0].count)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, condition.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual("First Name Middle Name Last Name Suffix (Business Fax)", condition.values[0][PropertyId.tagDisplayName.rawValue] as! String)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, condition.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertTrue(condition.values[0][PropertyId.tagSearchKey.rawValue] is [UInt8])
            XCTAssertTrue(condition.values[0][PropertyId.tagEntryId.rawValue] is [UInt8])
            XCTAssertEqual(1, condition.values[0][PropertyId.tagRecipientType.rawValue] as! UInt32)

            XCTAssertEqual(6, condition.values[1].count)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, condition.values[1][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual("name", condition.values[1][PropertyId.tagDisplayName.rawValue] as! String)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, condition.values[1][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, condition.values[1][PropertyId.tagSearchKey.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, condition.values[1][PropertyId.tagEntryId.rawValue] as! UInt32)
            XCTAssertEqual(1, condition.values[0][PropertyId.tagRecipientType.rawValue] as! UInt32)
        }
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xCB, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x6A, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x15, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B,
                0x00, 0x0F, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0x0B, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0xFE, 0x39, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x6E,
                0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.fromCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is AddressParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as!AddressParameter
            XCTAssertEqual(1, condition.values.count)
            XCTAssertEqual(6, condition.values[0].count)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, condition.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertTrue(condition.values[0][PropertyId.tagResponsibility.rawValue] as! Bool)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, condition.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, condition.values[0][PropertyId.tagSearchKey.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, condition.values[0][PropertyId.tagEntryId.rawValue] as! UInt32)
            XCTAssertEqual(1, condition.values[0][PropertyId.tagRecipientType.rawValue] as! UInt32)
        }
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xCB, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x6A, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x15, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B,
                0x00, 0x0F, 0x0E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0x0B, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0xFE, 0x39, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x6E,
                0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.fromCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is AddressParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as!AddressParameter
            XCTAssertEqual(1, condition.values.count)
            XCTAssertEqual(6, condition.values[0].count)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, condition.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertFalse(condition.values[0][PropertyId.tagResponsibility.rawValue] as! Bool)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, condition.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, condition.values[0][PropertyId.tagSearchKey.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, condition.values[0][PropertyId.tagEntryId.rawValue] as! UInt32)
            XCTAssertEqual(1, condition.values[0][PropertyId.tagRecipientType.rawValue] as! UInt32)
        }
    }

    func testSpecificWordsInSubjectCondition() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xCD, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
                0x70, 0x00, 0x68, 0x00, 0x72, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.specificWordsInSubjectCondition, file.rules[0].conditions[0].identifier)
            XCTAssertEqual(1, file.rules[0].conditions[0].parameters.count)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is StringParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameters[0] as! StringParameter
            XCTAssertEqual("phrase", condition.value)
        }
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xCD, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
                0x70, 0x00, 0x68, 0x00, 0x72, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x05, 0x6F, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.specificWordsInSubjectCondition, file.rules[0].conditions[0].identifier)
            XCTAssertEqual(2, file.rules[0].conditions[0].parameters.count)
            XCTAssertTrue(file.rules[0].conditions[0].parameters[0] is StringParameter)
            XCTAssertTrue(file.rules[0].conditions[0].parameters[1] is StringParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition1 = file.rules[0].conditions[0].parameters[0] as! StringParameter
            XCTAssertEqual("phrase", condition1.value)
            let condition2 = file.rules[0].conditions[0].parameters[1] as! StringParameter
            XCTAssertEqual("other", condition2.value)
        }
    }

    func testThroughAccountCondition() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x04, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xEE, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15,
                0x68, 0x00, 0x75, 0x00, 0x67, 0x00, 0x68, 0x00, 0x62, 0x00, 0x65, 0x00, 0x6C, 0x00, 0x6C, 0x00,
                0x61, 0x00, 0x72, 0x00, 0x73, 0x00, 0x40, 0x00, 0x67, 0x00, 0x6D, 0x00, 0x61, 0x00, 0x69, 0x00,
                0x6C, 0x00, 0x2E, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x0A, 0x2D, 0x31, 0x39, 0x30, 0x36,
                0x39, 0x32, 0x30, 0x36, 0x38, 0x01, 0x80, 0xEF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x69, 0xC0, 0x06, 0x38, 0x4C, 0x63, 0x62, 0x47, 0xAE, 0xD8, 0xC2, 0x3C, 0xAE,
                0xA4, 0xC6, 0x26, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(2, file.rules[0].conditions.count)
            XCTAssertEqual(.throughSpecifiedAccountCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is AccountParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! AccountParameter
            XCTAssertEqual("hughbellars@gmail.com", condition.accountName)
            XCTAssertEqual("-190692068", condition.unknown)
            XCTAssertTrue(file.rules[0].conditions[1].parameter is ProfileStampParameter)
        }
    }

    func testSentOnlyToMeCondition() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xC9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.sentOnlyToMeCondition, file.rules[0].conditions[0].identifier)
            XCTAssertEqual(0, file.rules[0].conditions[0].parameters.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
        }
    }

    func testNameInToBoxCondition() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.nameInToBoxCondition, file.rules[0].conditions[0].identifier)
            XCTAssertEqual(0, file.rules[0].conditions[0].parameters.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
        }
    }

    func testImportance() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xD2, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.importanceCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is ImportanceParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! ImportanceParameter
            XCTAssertEqual(MessageImportance.low, condition.importance)
        }
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xD2, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.importanceCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is ImportanceParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! ImportanceParameter
            XCTAssertEqual(MessageImportance.normal, condition.importance)
        }
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xD2, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.importanceCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is ImportanceParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! ImportanceParameter
            XCTAssertEqual(MessageImportance.high, condition.importance)
        }
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xD2, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.importanceCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is ImportanceParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! ImportanceParameter
            XCTAssertEqual(0x03, condition.rawImportance)
        }
    }

    func testSensitivityCondition() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xD3, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.sensitivityCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is SensitivityParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! SensitivityParameter
            XCTAssertEqual(MessageSensitivity.normal, condition.sensitivity)
        }
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xD3, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.sensitivityCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is SensitivityParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! SensitivityParameter
            XCTAssertEqual(MessageSensitivity.personal, condition.sensitivity)
        }
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xD3, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.sensitivityCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is SensitivityParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! SensitivityParameter
            XCTAssertEqual(MessageSensitivity.`private`, condition.sensitivity)
        }
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xD3, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.sensitivityCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is SensitivityParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! SensitivityParameter
            XCTAssertEqual(MessageSensitivity.confidential, condition.sensitivity)
        }
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xD3, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.sensitivityCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is SensitivityParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! SensitivityParameter
            XCTAssertEqual(0x04, condition.rawSensitivity)
        }
    }

    func testFlaggedForActionCondition() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xD0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x09, 0x46, 0x00, 0x6F, 0x00, 0x6C, 0x00, 0x6C, 0x00, 0x6F, 0x00, 0x77, 0x00,
                0x20, 0x00, 0x75, 0x00, 0x70, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.flaggedForActionCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is FlaggedForActionParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! FlaggedForActionParameter
            XCTAssertEqual("Follow up", condition.action)
        }
    }

    func testNameInCcBoxCondition() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xE2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.nameInCcBoxCondition, file.rules[0].conditions[0].identifier)
            XCTAssertEqual(0, file.rules[0].conditions[0].parameters.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
        }
    }

    func testNameInToOrCcBoxCondition() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xE3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.nameInToOrCcBoxCondition, file.rules[0].conditions[0].identifier)
            XCTAssertEqual(0, file.rules[0].conditions[0].parameters.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
        }
    }

    func testNameNotInToBoxCondition() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xCA, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.nameNotInToBoxCondition, file.rules[0].conditions[0].identifier)
            XCTAssertEqual(0, file.rules[0].conditions[0].parameters.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
        }
    }

    func testSentToCondition() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC6, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xCC, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x6A, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x15, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0x0B, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A,
                0x00, 0xFE, 0x39, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x6E,
                0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.sentToCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is AddressParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as!AddressParameter
            XCTAssertEqual(1, condition.values.count)
            XCTAssertEqual(6, condition.values[0].count)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, condition.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual("name", condition.values[0][PropertyId.tagDisplayName.rawValue] as! String)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, condition.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, condition.values[0][PropertyId.tagSearchKey.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, condition.values[0][PropertyId.tagEntryId.rawValue] as! UInt32)
            XCTAssertEqual(1, condition.values[0][PropertyId.tagRecipientType.rawValue] as! UInt32)
        }
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x03, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xCC, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0B, 0x00, 0x00, 0x00, 0xA1, 0x02, 0x00, 0x00, 0x03,
                0x00, 0x15, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x01, 0x30, 0x00, 0x00, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x01, 0xFF, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x6D, 0x00, 0x00, 0x00, 0x1E, 0x01, 0x00, 0x00, 0x1F,
                0x00, 0x02, 0x30, 0x00, 0x00, 0x00, 0x00, 0x8B, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x01, 0x0B, 0x30, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0x0A,
                0x00, 0xFE, 0x39, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x13, 0x3A, 0x00, 0x00, 0x00, 0x00, 0xC9, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F,
                0x00, 0x03, 0x30, 0x00, 0x00, 0x00, 0x00, 0x2D, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                0x00, 0xFE, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03,
                0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x01, 0x01, 0x3D, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x91, 0x02, 0x00, 0x00, 0x46,
                0x00, 0x69, 0x00, 0x72, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D,
                0x00, 0x65, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x64, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x65,
                0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x61,
                0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20,
                0x00, 0x53, 0x00, 0x75, 0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x78, 0x00, 0x20, 0x00, 0x28,
                0x00, 0x42, 0x00, 0x75, 0x00, 0x73, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x65, 0x00, 0x73, 0x00, 0x73,
                0x00, 0x20, 0x00, 0x46, 0x00, 0x61, 0x00, 0x78, 0x00, 0x29, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xFE, 0x42, 0xAA, 0x0A, 0x18, 0xC7, 0x1A, 0x10, 0xE8, 0x85, 0x0B, 0x65, 0x1C, 0x24, 0x00,
                0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x59, 0xDA, 0x07, 0x29, 0x9D, 0xAF, 0x5C, 0x4A, 0xB2, 0x0C, 0x8B,
                0x81, 0xA7, 0x8C, 0x96, 0xC0, 0x07, 0x00, 0xB2, 0xA9, 0x7E, 0x6D, 0x73, 0xAB, 0x95, 0x4D, 0xBB,
                0x15, 0x55, 0xC1, 0x54, 0x72, 0xFC, 0xB1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0xB2,
                0xA9, 0x7E, 0x6D, 0x73, 0xAB, 0x95, 0x4D, 0xBB, 0x15, 0x55, 0xC1, 0x54, 0x72, 0xFC, 0xB1, 0x00,
                0x00, 0x00, 0x00, 0x38, 0x02, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0x46, 0x00, 0x41, 0x00, 0x58, 0x00,
                0x00, 0x00, 0x46, 0x41, 0x58, 0x3A, 0x46, 0x49, 0x52, 0x53, 0x54, 0x20, 0x4E, 0x41, 0x4D, 0x45,
                0x20, 0x4D, 0x49, 0x44, 0x44, 0x4C, 0x45, 0x20, 0x4E, 0x41, 0x4D, 0x45, 0x20, 0x4C, 0x41, 0x53,
                0x54, 0x20, 0x4E, 0x41, 0x4D, 0x45, 0x20, 0x53, 0x55, 0x46, 0x46, 0x49, 0x58, 0x40, 0x2B, 0x33,
                0x20, 0x28, 0x34, 0x29, 0x20, 0x35, 0x20, 0x00, 0x46, 0x00, 0x69, 0x00, 0x72, 0x00, 0x73, 0x00,
                0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4D, 0x00,
                0x69, 0x00, 0x64, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00,
                0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x61, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00,
                0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x53, 0x00, 0x75, 0x00, 0x66, 0x00,
                0x66, 0x00, 0x69, 0x00, 0x78, 0x00, 0x40, 0x00, 0x2B, 0x00, 0x33, 0x00, 0x20, 0x00, 0x28, 0x00,
                0x34, 0x00, 0x29, 0x00, 0x20, 0x00, 0x35, 0x00, 0x20, 0x00, 0x00, 0x00, 0x46, 0x00, 0x69, 0x00,
                0x72, 0x00, 0x73, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00,
                0x20, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x64, 0x00, 0x64, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x20, 0x00,
                0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x4C, 0x00, 0x61, 0x00, 0x73, 0x00,
                0x74, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x20, 0x00, 0x53, 0x00,
                0x75, 0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x78, 0x00, 0x40, 0x00, 0x2B, 0x00, 0x33, 0x00,
                0x20, 0x00, 0x28, 0x00, 0x34, 0x00, 0x29, 0x00, 0x20, 0x00, 0x35, 0x00, 0x20, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x6A, 0x00, 0x00, 0x00, 0x03, 0x00, 0x15, 0x0C,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1F, 0x00, 0x01, 0x30,
                0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0xFF, 0x0F,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x02, 0x30,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0x0B, 0x30,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x0A, 0x00, 0xFE, 0x39,
                0x00, 0x00, 0x00, 0x00, 0x0F, 0x01, 0x04, 0x80, 0x00, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x61, 0x00,
                0x6D, 0x00, 0x65, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.sentToCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is AddressParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)

            let condition = file.rules[0].conditions[0].parameter as!AddressParameter
            XCTAssertEqual(2, condition.values.count)
            XCTAssertEqual(11, condition.values[0].count)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, condition.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual("First Name Middle Name Last Name Suffix (Business Fax)", condition.values[0][PropertyId.tagDisplayName.rawValue] as! String)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, condition.values[0][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertTrue(condition.values[0][PropertyId.tagSearchKey.rawValue] is [UInt8])
            XCTAssertTrue(condition.values[0][PropertyId.tagEntryId.rawValue] is [UInt8])
            XCTAssertEqual(1, condition.values[0][PropertyId.tagRecipientType.rawValue] as! UInt32)

            XCTAssertEqual(6, condition.values[1].count)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, condition.values[1][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual("name", condition.values[1][PropertyId.tagDisplayName.rawValue] as! String)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, condition.values[1][PropertyId.tagSmtpAddress.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, condition.values[1][PropertyId.tagSearchKey.rawValue] as! UInt32)
            XCTAssertEqual(MAPI_E.NOT_FOUND.rawValue, condition.values[1][PropertyId.tagEntryId.rawValue] as! UInt32)
            XCTAssertEqual(1, condition.values[0][PropertyId.tagRecipientType.rawValue] as! UInt32)
        }
    }

    func testSpecificWordsInBodyCondition() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xCE, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
                0x70, 0x00, 0x68, 0x00, 0x72, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.specificWordsInBodyCondition, file.rules[0].conditions[0].identifier)
            XCTAssertEqual(1, file.rules[0].conditions[0].parameters.count)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is StringParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameters[0] as! StringParameter
            XCTAssertEqual("phrase", condition.value)
        }
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xCE, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
                0x70, 0x00, 0x68, 0x00, 0x72, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x05, 0x6F, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.specificWordsInBodyCondition, file.rules[0].conditions[0].identifier)
            XCTAssertEqual(2, file.rules[0].conditions[0].parameters.count)
            XCTAssertTrue(file.rules[0].conditions[0].parameters[0] is StringParameter)
            XCTAssertTrue(file.rules[0].conditions[0].parameters[1] is StringParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition1 = file.rules[0].conditions[0].parameters[0] as! StringParameter
            XCTAssertEqual("phrase", condition1.value)
            let condition2 = file.rules[0].conditions[0].parameters[1] as! StringParameter
            XCTAssertEqual("other", condition2.value)
        }
    }

    func testSpecificWordsInSubjectOrBodyCondition() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xCF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
                0x70, 0x00, 0x68, 0x00, 0x72, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.specificWordsInSubjectOrBodyCondition, file.rules[0].conditions[0].identifier)
            XCTAssertEqual(1, file.rules[0].conditions[0].parameters.count)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is StringParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameters[0] as! StringParameter
            XCTAssertEqual("phrase", condition.value)
        }
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xCF, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
                0x70, 0x00, 0x68, 0x00, 0x72, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x05, 0x6F, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.specificWordsInSubjectOrBodyCondition, file.rules[0].conditions[0].identifier)
            XCTAssertEqual(2, file.rules[0].conditions[0].parameters.count)
            XCTAssertTrue(file.rules[0].conditions[0].parameters[0] is StringParameter)
            XCTAssertTrue(file.rules[0].conditions[0].parameters[1] is StringParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition1 = file.rules[0].conditions[0].parameters[0] as! StringParameter
            XCTAssertEqual("phrase", condition1.value)
            let condition2 = file.rules[0].conditions[0].parameters[1] as! StringParameter
            XCTAssertEqual("other", condition2.value)
        }
    }

    func testSpecificWordsInMessageHeader() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xE8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
                0x70, 0x00, 0x68, 0x00, 0x72, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.specificWordsInMessageHeaderCondition, file.rules[0].conditions[0].identifier)
            XCTAssertEqual(1, file.rules[0].conditions[0].parameters.count)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is StringParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameters[0] as! StringParameter
            XCTAssertEqual("phrase", condition.value)
        }
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xE8, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
                0x70, 0x00, 0x68, 0x00, 0x72, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x05, 0x6F, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.specificWordsInMessageHeaderCondition, file.rules[0].conditions[0].identifier)
            XCTAssertEqual(2, file.rules[0].conditions[0].parameters.count)
            XCTAssertTrue(file.rules[0].conditions[0].parameters[0] is StringParameter)
            XCTAssertTrue(file.rules[0].conditions[0].parameters[1] is StringParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition1 = file.rules[0].conditions[0].parameters[0] as! StringParameter
            XCTAssertEqual("phrase", condition1.value)
            let condition2 = file.rules[0].conditions[0].parameters[1] as! StringParameter
            XCTAssertEqual("other", condition2.value)
        }
    }

    func testSpecificWordsInSendersAddress() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xE6, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
                0x70, 0x00, 0x68, 0x00, 0x72, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.specificWordsInSendersAddressCondition, file.rules[0].conditions[0].identifier)
            XCTAssertEqual(1, file.rules[0].conditions[0].parameters.count)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is StringParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameters[0] as! StringParameter
            XCTAssertEqual("phrase", condition.value)
        }
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xE6, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
                0x70, 0x00, 0x68, 0x00, 0x72, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x05, 0x6F, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.specificWordsInSendersAddressCondition, file.rules[0].conditions[0].identifier)
            XCTAssertEqual(2, file.rules[0].conditions[0].parameters.count)
            XCTAssertTrue(file.rules[0].conditions[0].parameters[0] is StringParameter)
            XCTAssertTrue(file.rules[0].conditions[0].parameters[1] is StringParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition1 = file.rules[0].conditions[0].parameters[0] as! StringParameter
            XCTAssertEqual("phrase", condition1.value)
            let condition2 = file.rules[0].conditions[0].parameters[1] as! StringParameter
            XCTAssertEqual("other", condition2.value)
        }
    }

    func testSpecificWordsInRecipientsAddress() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xE5, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
                0x70, 0x00, 0x68, 0x00, 0x72, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.specificWordsInRecipientsAddressCondition, file.rules[0].conditions[0].identifier)
            XCTAssertEqual(1, file.rules[0].conditions[0].parameters.count)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is StringParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameters[0] as! StringParameter
            XCTAssertEqual("phrase", condition.value)
        }
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xE5, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06,
                0x70, 0x00, 0x68, 0x00, 0x72, 0x00, 0x61, 0x00, 0x73, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x05, 0x6F, 0x00, 0x74, 0x00, 0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.specificWordsInRecipientsAddressCondition, file.rules[0].conditions[0].identifier)
            XCTAssertEqual(2, file.rules[0].conditions[0].parameters.count)
            XCTAssertTrue(file.rules[0].conditions[0].parameters[0] is StringParameter)
            XCTAssertTrue(file.rules[0].conditions[0].parameters[1] is StringParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition1 = file.rules[0].conditions[0].parameters[0] as! StringParameter
            XCTAssertEqual("phrase", condition1.value)
            let condition2 = file.rules[0].conditions[0].parameters[1] as! StringParameter
            XCTAssertEqual("other", condition2.value)
        }
    }

    func testAssignedToCategoryCondition() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xD7, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D,
                0x42, 0x00, 0x6C, 0x00, 0x75, 0x00, 0x65, 0x00, 0x20, 0x00, 0x43, 0x00, 0x61, 0x00, 0x74, 0x00,
                0x65, 0x00, 0x67, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.assignedToCategoryCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is CategoryParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as!CategoryParameter
            XCTAssertEqual(["Blue Category"], condition.categories)
        }
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6B, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xD7, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13,
                0x42, 0x00, 0x6C, 0x00, 0x75, 0x00, 0x65, 0x00, 0x20, 0x00, 0x43, 0x00, 0x61, 0x00, 0x74, 0x00,
                0x65, 0x00, 0x67, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x79, 0x00, 0x3B, 0x00, 0x4F, 0x00, 0x74, 0x00,
                0x68, 0x00, 0x65, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.assignedToCategoryCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is CategoryParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as!CategoryParameter
            XCTAssertEqual(["Blue Category", "Other"], condition.categories)
        }
    }

    func testAssignedToAnyCategoryCondition() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xF6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.assignedToAnyCategoryCondition, file.rules[0].conditions[0].identifier)
            XCTAssertEqual(0, file.rules[0].conditions[0].parameters.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
        }
    }

    func testWhichIsAnAutomaticReplyCondition() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.automaticReplyCondition, file.rules[0].conditions[0].identifier)
            XCTAssertEqual(0, file.rules[0].conditions[0].parameters.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
        }
    }

    func testHasAttachmentCondition() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xDE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.hasAttachmentCondition, file.rules[0].conditions[0].identifier)
            XCTAssertEqual(0, file.rules[0].conditions[0].parameters.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
        }
    }

    func testSizeInSpecificRangeCondition() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xE0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.sizeInSpecificRangeCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is SizeParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! SizeParameter
            XCTAssertEqual(0, condition.minSizeInKilobytes)
            XCTAssertEqual(0, condition.maxSizeInKilobytes)
        }
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xE0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.sizeInSpecificRangeCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is SizeParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! SizeParameter
            XCTAssertEqual(1, condition.minSizeInKilobytes)
            XCTAssertEqual(0, condition.maxSizeInKilobytes)
        }
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xE0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.sizeInSpecificRangeCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is SizeParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! SizeParameter
            XCTAssertEqual(0, condition.minSizeInKilobytes)
            XCTAssertEqual(1, condition.maxSizeInKilobytes)
        }
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xE0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.sizeInSpecificRangeCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is SizeParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! SizeParameter
            XCTAssertEqual(1, condition.minSizeInKilobytes)
            XCTAssertEqual(1, condition.maxSizeInKilobytes)
        }
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xE0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x3F, 0x42, 0x0F, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.sizeInSpecificRangeCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is SizeParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! SizeParameter
            XCTAssertEqual(1, condition.minSizeInKilobytes)
            XCTAssertEqual(999999, condition.maxSizeInKilobytes)
        }
    }

    func testReceivedInSpecificDateSpanCondition() throws {
        let timeZone = TimeZone(identifier: "GMT")!
        var calendar = Calendar(identifier: .gregorian)
        calendar.timeZone = timeZone
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xE1, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFA, 0xA4, 0x4F, 0xFA, 0x7F, 0x82, 0xE5, 0x40, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x82, 0xE5, 0x40, 0x00,
                0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.receivedInSpecificDateSpanCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is TimeParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! TimeParameter
            XCTAssertTrue(condition.includeAfterDate)
            XCTAssertEqual(calendar.date(from: DateComponents(timeZone: timeZone, year: 2020, month: 08, day: 08, hour: 23, minute: 59, second: 0)), condition.afterDate.date)
            XCTAssertFalse(condition.includeBeforeDate)
            XCTAssertEqual(calendar.date(from: DateComponents(timeZone: timeZone, year: 2020, month: 08, day: 09)), condition.beforeDate.date)
        }
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xE1, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFA, 0xA4, 0x4F, 0xFA, 0x9F, 0x82, 0xE5, 0x40, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x81, 0xE5, 0x40, 0x00,
                0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.receivedInSpecificDateSpanCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is TimeParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! TimeParameter
            XCTAssertFalse(condition.includeAfterDate)
            XCTAssertEqual(calendar.date(from: DateComponents(timeZone: timeZone, year: 2020, month: 08, day: 09, hour: 23, minute: 59, second: 0)), condition.afterDate.date)
            XCTAssertTrue(condition.includeBeforeDate)
            XCTAssertEqual(calendar.date(from: DateComponents(timeZone: timeZone, year: 2020, month: 08, day: 02)), condition.beforeDate.date)
        }
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xE1, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFA, 0xA4, 0x4F, 0xFA, 0xBF, 0x81, 0xE5, 0x40, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x82, 0xE5, 0x40, 0x00,
                0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.receivedInSpecificDateSpanCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is TimeParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let calendar = Calendar(identifier: .gregorian)
            let condition = file.rules[0].conditions[0].parameter as! TimeParameter
            XCTAssertTrue(condition.includeAfterDate)
            XCTAssertEqual(calendar.date(from: DateComponents(timeZone: timeZone, year: 2020, month: 08, day: 02, hour: 23, minute: 59, second: 0)), condition.afterDate.date)
            XCTAssertTrue(condition.includeBeforeDate)
            XCTAssertEqual(calendar.date(from: DateComponents(timeZone: timeZone, year: 2020, month: 08, day: 05)), condition.beforeDate.date)
        }
    }

    func testUsesFormCondition() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xE4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17,
                0x41, 0x00, 0x63, 0x00, 0x63, 0x00, 0x65, 0x00, 0x70, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4D, 0x00,
                0x65, 0x00, 0x65, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x20, 0x00, 0x52, 0x00,
                0x65, 0x00, 0x73, 0x00, 0x70, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x65, 0x00, 0x1D, 0x49,
                0x50, 0x4D, 0x2E, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6C, 0x65, 0x2E, 0x4D, 0x65, 0x65, 0x74,
                0x69, 0x6E, 0x67, 0x2E, 0x52, 0x65, 0x73, 0x70, 0x2E, 0x50, 0x6F, 0x73, 0x00, 0x00, 0x00, 0x00,
                0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.usesFormCondition, file.rules[0].conditions[0].identifier)
            XCTAssertEqual(1, file.rules[0].conditions[0].parameters.count)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is FormTypeParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! FormTypeParameter
            XCTAssertEqual("Accept Meeting Response", condition.name)
            XCTAssertEqual("IPM.Schedule.Meeting.Resp.Pos", condition.className)
        }
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC2, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xE4, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17,
                0x41, 0x00, 0x63, 0x00, 0x63, 0x00, 0x65, 0x00, 0x70, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4D, 0x00,
                0x65, 0x00, 0x65, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x20, 0x00, 0x52, 0x00,
                0x65, 0x00, 0x73, 0x00, 0x70, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x65, 0x00, 0x1D, 0x49,
                0x50, 0x4D, 0x2E, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6C, 0x65, 0x2E, 0x4D, 0x65, 0x65, 0x74,
                0x69, 0x6E, 0x67, 0x2E, 0x52, 0x65, 0x73, 0x70, 0x2E, 0x50, 0x6F, 0x73, 0x00, 0x00, 0x00, 0x00,
                0x0C, 0x54, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x65, 0x00, 0x73,
                0x00, 0x73, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x13, 0x49, 0x50, 0x4D, 0x2E, 0x4E, 0x6F,
                0x74, 0x65, 0x2E, 0x4D, 0x6F, 0x62, 0x69, 0x6C, 0x65, 0x2E, 0x53, 0x4D, 0x53, 0x00, 0x00, 0x00,
                0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.usesFormCondition, file.rules[0].conditions[0].identifier)
            XCTAssertEqual(2, file.rules[0].conditions[0].parameters.count)
            XCTAssertTrue(file.rules[0].conditions[0].parameters[0] is FormTypeParameter)
            XCTAssertTrue(file.rules[0].conditions[0].parameters[1] is FormTypeParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition1 = file.rules[0].conditions[0].parameters[0] as! FormTypeParameter
            XCTAssertEqual("Accept Meeting Response", condition1.name)
            XCTAssertEqual("IPM.Schedule.Meeting.Resp.Pos", condition1.className)
            let condition2 = file.rules[0].conditions[0].parameters[1] as! FormTypeParameter
            XCTAssertEqual("Text Message", condition2.name)
            XCTAssertEqual("IPM.Note.Mobile.SMS", condition2.className)
        }
    }

    func testWithSelectedPropertiesOfDocumentOrFormsCondition() throws {
        // String, contains
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC1, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xDF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17,
                0x41, 0x00, 0x63, 0x00, 0x63, 0x00, 0x65, 0x00, 0x70, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4D, 0x00,
                0x65, 0x00, 0x65, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x20, 0x00, 0x52, 0x00,
                0x65, 0x00, 0x73, 0x00, 0x70, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x65, 0x00, 0x01, 0x00,
                0x06, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x68, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x1F, 0x00, 0x22,
                0x82, 0x00, 0x00, 0x00, 0x00, 0x05, 0x76, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x75, 0x00, 0x65, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xF5, 0x49, 0x9F, 0xF4,
                0x1B, 0x83, 0xE5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.withSelectedPropertiesOfDocumentOrFormsCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is FormParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! FormParameter
            XCTAssertEqual(["Accept Meeting Response"], condition.forms)
            XCTAssertEqual(1, condition.documentProperties.count)
            XCTAssertEqual("Author", condition.documentProperties[0].field)
            XCTAssertEqual(0x8222, condition.documentProperties[0].tag.id)
            XCTAssertEqual(PropertyType.string, condition.documentProperties[0].tag.type)
            XCTAssertEqual(.contains, condition.documentProperties[0].stringMatchType)
            XCTAssertEqual("value", condition.documentProperties[0].stringValue)
            XCTAssertEqual(.equals, condition.documentProperties[0].numberMatchType)
            XCTAssertEqual(0, condition.documentProperties[0].numberValue2)
            XCTAssertEqual(0, condition.documentProperties[0].rawBoolMatchType)
            XCTAssertEqual(.before, condition.documentProperties[0].dateMatchType)
            XCTAssertEqual([], condition.classes)
        }
        // String, isEqual
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x93, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xDF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x06, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x68, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x1F,
                0x00, 0x22, 0x82, 0x01, 0x00, 0x00, 0x00, 0x05, 0x76, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x75, 0x00,
                0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE4, 0x38,
                0x8E, 0xE3, 0x2A, 0x83, 0xE5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.withSelectedPropertiesOfDocumentOrFormsCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is FormParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! FormParameter
            XCTAssertEqual([], condition.forms)
            XCTAssertEqual(1, condition.documentProperties.count)
            XCTAssertEqual("Author", condition.documentProperties[0].field)
            XCTAssertEqual(0x8222, condition.documentProperties[0].tag.id)
            XCTAssertEqual(PropertyType.string, condition.documentProperties[0].tag.type)
            XCTAssertEqual(.isExactly, condition.documentProperties[0].stringMatchType)
            XCTAssertEqual("value", condition.documentProperties[0].stringValue)
            XCTAssertEqual(.equals, condition.documentProperties[0].numberMatchType)
            XCTAssertEqual(0, condition.documentProperties[0].numberValue2)
            XCTAssertEqual(0, condition.documentProperties[0].rawBoolMatchType)
            XCTAssertEqual(.before, condition.documentProperties[0].dateMatchType)
            XCTAssertEqual([], condition.classes)
        }
        // String, doesNotContain
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x93, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xDF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x06, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x68, 0x00, 0x6F, 0x00, 0x72, 0x00, 0x1F,
                0x00, 0x22, 0x82, 0x02, 0x00, 0x00, 0x00, 0x05, 0x76, 0x00, 0x61, 0x00, 0x6C, 0x00, 0x75, 0x00,
                0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x6C,
                0xC1, 0x16, 0x2B, 0x83, 0xE5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.withSelectedPropertiesOfDocumentOrFormsCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is FormParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! FormParameter
            XCTAssertEqual([], condition.forms)
            XCTAssertEqual(1, condition.documentProperties.count)
            XCTAssertEqual("Author", condition.documentProperties[0].field)
            XCTAssertEqual(0x8222, condition.documentProperties[0].tag.id)
            XCTAssertEqual(PropertyType.string, condition.documentProperties[0].tag.type)
            XCTAssertEqual(.doesNotContain, condition.documentProperties[0].stringMatchType)
            XCTAssertEqual("value", condition.documentProperties[0].stringValue)
            XCTAssertEqual(.equals, condition.documentProperties[0].numberMatchType)
            XCTAssertEqual(0, condition.documentProperties[0].numberValue2)
            XCTAssertEqual(0, condition.documentProperties[0].rawBoolMatchType)
            XCTAssertEqual(.before, condition.documentProperties[0].dateMatchType)
            XCTAssertEqual([], condition.classes)
        }
        // Number, equals (positive)
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xDF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x05, 0x42, 0x00, 0x79, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x03, 0x00, 0x23,
                0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD2, 0x04,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0xF5, 0x49, 0x9F, 0xF4, 0x2A, 0x83, 0xE5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.withSelectedPropertiesOfDocumentOrFormsCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is FormParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! FormParameter
            XCTAssertEqual([], condition.forms)
            XCTAssertEqual(1, condition.documentProperties.count)
            XCTAssertEqual("Bytes", condition.documentProperties[0].field)
            XCTAssertEqual(0x8223, condition.documentProperties[0].tag.id)
            XCTAssertEqual(PropertyType.integer32, condition.documentProperties[0].tag.type)
            XCTAssertEqual(.contains, condition.documentProperties[0].stringMatchType)
            XCTAssertEqual("", condition.documentProperties[0].stringValue)
            XCTAssertEqual(.equals, condition.documentProperties[0].numberMatchType)
            XCTAssertEqual(1234, condition.documentProperties[0].numberValue2)
            XCTAssertEqual(0, condition.documentProperties[0].rawBoolMatchType)
            XCTAssertEqual(.before, condition.documentProperties[0].dateMatchType)
            XCTAssertEqual([], condition.classes)
        }
        // Number, equals (negative)
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xDF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x05, 0x42, 0x00, 0x79, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x03, 0x00, 0x23,
                0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF,
                0xFF, 0xFF, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x06, 0x5B, 0xB0, 0x05, 0x2B, 0x83, 0xE5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.withSelectedPropertiesOfDocumentOrFormsCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is FormParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! FormParameter
            XCTAssertEqual([], condition.forms)
            XCTAssertEqual(1, condition.documentProperties.count)
            XCTAssertEqual("Bytes", condition.documentProperties[0].field)
            XCTAssertEqual(0x8223, condition.documentProperties[0].tag.id)
            XCTAssertEqual(PropertyType.integer32, condition.documentProperties[0].tag.type)
            XCTAssertEqual(.contains, condition.documentProperties[0].stringMatchType)
            XCTAssertEqual("", condition.documentProperties[0].stringValue)
            XCTAssertEqual(.equals, condition.documentProperties[0].numberMatchType)
            XCTAssertEqual(-1, condition.documentProperties[0].numberValue2)
            XCTAssertEqual(0, condition.documentProperties[0].rawBoolMatchType)
            XCTAssertEqual(.before, condition.documentProperties[0].dateMatchType)
            XCTAssertEqual([], condition.classes)
        }
        // Number, not equal to
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xDF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x05, 0x42, 0x00, 0x79, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x03, 0x00, 0x23,
                0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD2, 0x04,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x2E, 0xD8, 0x82, 0x2D, 0x2B, 0x83, 0xE5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.withSelectedPropertiesOfDocumentOrFormsCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is FormParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! FormParameter
            XCTAssertEqual([], condition.forms)
            XCTAssertEqual(1, condition.documentProperties.count)
            XCTAssertEqual("Bytes", condition.documentProperties[0].field)
            XCTAssertEqual(0x8223, condition.documentProperties[0].tag.id)
            XCTAssertEqual(PropertyType.integer32, condition.documentProperties[0].tag.type)
            XCTAssertEqual(.contains, condition.documentProperties[0].stringMatchType)
            XCTAssertEqual("", condition.documentProperties[0].stringValue)
            XCTAssertEqual(.notEqualTo, condition.documentProperties[0].numberMatchType)
            XCTAssertEqual(1234, condition.documentProperties[0].numberValue2)
            XCTAssertEqual(0, condition.documentProperties[0].rawBoolMatchType)
            XCTAssertEqual(.before, condition.documentProperties[0].dateMatchType)
            XCTAssertEqual([], condition.classes)
        }
        // Number, is at most
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xDF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x05, 0x42, 0x00, 0x79, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x03, 0x00, 0x23,
                0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD2, 0x04,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x44, 0x44, 0x44, 0x44, 0x2B, 0x83, 0xE5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.withSelectedPropertiesOfDocumentOrFormsCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is FormParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! FormParameter
            XCTAssertEqual([], condition.forms)
            XCTAssertEqual(1, condition.documentProperties.count)
            XCTAssertEqual("Bytes", condition.documentProperties[0].field)
            XCTAssertEqual(0x8223, condition.documentProperties[0].tag.id)
            XCTAssertEqual(PropertyType.integer32, condition.documentProperties[0].tag.type)
            XCTAssertEqual(.contains, condition.documentProperties[0].stringMatchType)
            XCTAssertEqual("", condition.documentProperties[0].stringValue)
            XCTAssertEqual(.isAtMost, condition.documentProperties[0].numberMatchType)
            XCTAssertEqual(1234, condition.documentProperties[0].numberValue2)
            XCTAssertEqual(0, condition.documentProperties[0].rawBoolMatchType)
            XCTAssertEqual(.before, condition.documentProperties[0].dateMatchType)
            XCTAssertEqual([], condition.classes)
        }
        // Number, is at least
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xDF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x05, 0x42, 0x00, 0x79, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x03, 0x00, 0x23,
                0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD2, 0x04,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x44, 0x44, 0x44, 0x44, 0x2B, 0x83, 0xE5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.withSelectedPropertiesOfDocumentOrFormsCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is FormParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! FormParameter
            XCTAssertEqual([], condition.forms)
            XCTAssertEqual(1, condition.documentProperties.count)
            XCTAssertEqual("Bytes", condition.documentProperties[0].field)
            XCTAssertEqual(0x8223, condition.documentProperties[0].tag.id)
            XCTAssertEqual(PropertyType.integer32, condition.documentProperties[0].tag.type)
            XCTAssertEqual(.contains, condition.documentProperties[0].stringMatchType)
            XCTAssertEqual("", condition.documentProperties[0].stringValue)
            XCTAssertEqual(.isAtLeast, condition.documentProperties[0].numberMatchType)
            XCTAssertEqual(1234, condition.documentProperties[0].numberValue2)
            XCTAssertEqual(0, condition.documentProperties[0].rawBoolMatchType)
            XCTAssertEqual(.before, condition.documentProperties[0].dateMatchType)
            XCTAssertEqual([], condition.classes)
        }
        // Number, is more than
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xDF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x05, 0x42, 0x00, 0x79, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x03, 0x00, 0x23,
                0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD2, 0x04,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x50, 0xFA, 0xA4, 0x4F, 0x2B, 0x83, 0xE5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.withSelectedPropertiesOfDocumentOrFormsCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is FormParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! FormParameter
            XCTAssertEqual([], condition.forms)
            XCTAssertEqual(1, condition.documentProperties.count)
            XCTAssertEqual("Bytes", condition.documentProperties[0].field)
            XCTAssertEqual(0x8223, condition.documentProperties[0].tag.id)
            XCTAssertEqual(PropertyType.integer32, condition.documentProperties[0].tag.type)
            XCTAssertEqual(.contains, condition.documentProperties[0].stringMatchType)
            XCTAssertEqual("", condition.documentProperties[0].stringValue)
            XCTAssertEqual(.isMoreThan, condition.documentProperties[0].numberMatchType)
            XCTAssertEqual(1234, condition.documentProperties[0].numberValue2)
            XCTAssertEqual(0, condition.documentProperties[0].rawBoolMatchType)
            XCTAssertEqual(.before, condition.documentProperties[0].dateMatchType)
            XCTAssertEqual([], condition.classes)
        }
        // Number, is less than
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xDF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x05, 0x42, 0x00, 0x79, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x03, 0x00, 0x23,
                0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD2, 0x04,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x50, 0xFA, 0xA4, 0x4F, 0x2B, 0x83, 0xE5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.withSelectedPropertiesOfDocumentOrFormsCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is FormParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! FormParameter
            XCTAssertEqual([], condition.forms)
            XCTAssertEqual(1, condition.documentProperties.count)
            XCTAssertEqual("Bytes", condition.documentProperties[0].field)
            XCTAssertEqual(0x8223, condition.documentProperties[0].tag.id)
            XCTAssertEqual(PropertyType.integer32, condition.documentProperties[0].tag.type)
            XCTAssertEqual(.contains, condition.documentProperties[0].stringMatchType)
            XCTAssertEqual("", condition.documentProperties[0].stringValue)
            XCTAssertEqual(.isLessThan, condition.documentProperties[0].numberMatchType)
            XCTAssertEqual(1234, condition.documentProperties[0].numberValue2)
            XCTAssertEqual(0, condition.documentProperties[0].rawBoolMatchType)
            XCTAssertEqual(.before, condition.documentProperties[0].dateMatchType)
            XCTAssertEqual([], condition.classes)
        }
        let timeZone = TimeZone(identifier: "GMT")!
        var calendar = Calendar(identifier: .gregorian)
        calendar.timeZone = timeZone
        // Date, before
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xDF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x0D, 0x43, 0x00, 0x72, 0x00, 0x65, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F,
                0x00, 0x6E, 0x00, 0x20, 0x00, 0x54, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x40, 0x00, 0x28,
                0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0xC7, 0x71, 0x1C, 0xC7, 0x0B, 0x67, 0xE5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.withSelectedPropertiesOfDocumentOrFormsCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is FormParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! FormParameter
            XCTAssertEqual([], condition.forms)
            XCTAssertEqual(1, condition.documentProperties.count)
            XCTAssertEqual("Creation Time", condition.documentProperties[0].field)
            XCTAssertEqual(0x8228, condition.documentProperties[0].tag.id)
            XCTAssertEqual(PropertyType.time, condition.documentProperties[0].tag.type)
            XCTAssertEqual(.contains, condition.documentProperties[0].stringMatchType)
            XCTAssertEqual("", condition.documentProperties[0].stringValue)
            XCTAssertEqual(.equals, condition.documentProperties[0].numberMatchType)
            XCTAssertEqual(0, condition.documentProperties[0].numberValue2)
            XCTAssertEqual(0, condition.documentProperties[0].rawBoolMatchType)
            XCTAssertEqual(.before, condition.documentProperties[0].dateMatchType)
            XCTAssertEqual(calendar.date(from: DateComponents(timeZone: timeZone, year: 2020, month: 01, day: 02, hour: 08, minute: 50, second: 0)), condition.documentProperties[0].dateValue.date)
            XCTAssertEqual([], condition.classes)
        }
        // Date, after
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xDF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x0D, 0x43, 0x00, 0x72, 0x00, 0x65, 0x00, 0x61, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6F,
                0x00, 0x6E, 0x00, 0x20, 0x00, 0x54, 0x00, 0x69, 0x00, 0x6D, 0x00, 0x65, 0x00, 0x40, 0x00, 0x28,
                0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0xF5, 0x49, 0x9F, 0xF4, 0x2B, 0x83, 0xE5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.withSelectedPropertiesOfDocumentOrFormsCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is FormParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! FormParameter
            XCTAssertEqual([], condition.forms)
            XCTAssertEqual(1, condition.documentProperties.count)
            XCTAssertEqual("Creation Time", condition.documentProperties[0].field)
            XCTAssertEqual(0x8228, condition.documentProperties[0].tag.id)
            XCTAssertEqual(PropertyType.time, condition.documentProperties[0].tag.type)
            XCTAssertEqual(.contains, condition.documentProperties[0].stringMatchType)
            XCTAssertEqual("", condition.documentProperties[0].stringValue)
            XCTAssertEqual(.equals, condition.documentProperties[0].numberMatchType)
            XCTAssertEqual(0, condition.documentProperties[0].numberValue2)
            XCTAssertEqual(0, condition.documentProperties[0].rawBoolMatchType)
            XCTAssertEqual(.after, condition.documentProperties[0].dateMatchType)
            XCTAssertEqual(calendar.date(from: DateComponents(timeZone: timeZone, year: 2020, month: 08, day: 14, hour: 08, minute: 58, second: 01)), condition.documentProperties[0].dateValue.date)
            XCTAssertEqual([], condition.classes)
        }
        // Multiple
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xDF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2B,
                0x41, 0x00, 0x63, 0x00, 0x63, 0x00, 0x65, 0x00, 0x70, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4D, 0x00,
                0x65, 0x00, 0x65, 0x00, 0x74, 0x00, 0x69, 0x00, 0x6E, 0x00, 0x67, 0x00, 0x20, 0x00, 0x52, 0x00,
                0x65, 0x00, 0x73, 0x00, 0x70, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x73, 0x00, 0x65, 0x00, 0x3B, 0x00,
                0x20, 0x00, 0x54, 0x00, 0x65, 0x00, 0x78, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4D, 0x00, 0x65, 0x00,
                0x73, 0x00, 0x73, 0x00, 0x61, 0x00, 0x67, 0x00, 0x65, 0x00, 0x3B, 0x00, 0x20, 0x00, 0x54, 0x00,
                0x61, 0x00, 0x73, 0x00, 0x6B, 0x00, 0x02, 0x00, 0x05, 0x42, 0x00, 0x79, 0x00, 0x74, 0x00, 0x65,
                0x00, 0x73, 0x00, 0x03, 0x00, 0x23, 0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0xD2, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x5B, 0xB0, 0x05, 0x2C, 0x83, 0xE5, 0x40,
                0x00, 0x00, 0x00, 0x00, 0x06, 0x41, 0x00, 0x75, 0x00, 0x74, 0x00, 0x68, 0x00, 0x6F, 0x00, 0x72,
                0x00, 0x1F, 0x00, 0x22, 0x82, 0x00, 0x00, 0x00, 0x00, 0x05, 0x76, 0x00, 0x61, 0x00, 0x6C, 0x00,
                0x75, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x0B, 0xB6, 0x60, 0x0B, 0x2C, 0x83, 0xE5, 0x40, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
                0x1D, 0x49, 0x50, 0x4D, 0x2E, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6C, 0x65, 0x2E, 0x4D, 0x65,
                0x65, 0x74, 0x69, 0x6E, 0x67, 0x2E, 0x52, 0x65, 0x73, 0x70, 0x2E, 0x50, 0x6F, 0x73, 0x13, 0x49,
                0x50, 0x4D, 0x2E, 0x4E, 0x6F, 0x74, 0x65, 0x2E, 0x4D, 0x6F, 0x62, 0x69, 0x6C, 0x65, 0x2E, 0x53,
                0x4D, 0x53, 0x08, 0x49, 0x50, 0x4D, 0x2E, 0x54, 0x61, 0x73, 0x6B, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.withSelectedPropertiesOfDocumentOrFormsCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is FormParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! FormParameter
            XCTAssertEqual(["Accept Meeting Response", " Text Message", " Task"], condition.forms)
            XCTAssertEqual(2, condition.documentProperties.count)
            XCTAssertEqual("Bytes", condition.documentProperties[0].field)
            XCTAssertEqual(0x8223, condition.documentProperties[0].tag.id)
            XCTAssertEqual(PropertyType.integer32, condition.documentProperties[0].tag.type)
            XCTAssertEqual(.contains, condition.documentProperties[0].stringMatchType)
            XCTAssertEqual("", condition.documentProperties[0].stringValue)
            XCTAssertEqual(.equals, condition.documentProperties[0].numberMatchType)
            XCTAssertEqual(1234, condition.documentProperties[0].numberValue2)
            XCTAssertEqual(0, condition.documentProperties[0].rawBoolMatchType)
            XCTAssertEqual(.before, condition.documentProperties[0].dateMatchType)
            XCTAssertEqual("Author", condition.documentProperties[1].field)
            XCTAssertEqual(0x8222, condition.documentProperties[1].tag.id)
            XCTAssertEqual(PropertyType.string, condition.documentProperties[1].tag.type)
            XCTAssertEqual(.contains, condition.documentProperties[1].stringMatchType)
            XCTAssertEqual("value", condition.documentProperties[1].stringValue)
            XCTAssertEqual(.equals, condition.documentProperties[1].numberMatchType)
            XCTAssertEqual(0, condition.documentProperties[1].numberValue2)
            XCTAssertEqual(0, condition.documentProperties[1].rawBoolMatchType)
            XCTAssertEqual(.before, condition.documentProperties[1].dateMatchType)
            XCTAssertEqual(["IPM.Schedule.Meeting.Resp.Pos", "IPM.Note.Mobile.SMS", "IPM.Task"], condition.classes)
        }
    }

    func testWithRelevanceInSpecificRangeCondition() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x80, 0x4f, 0x12, 0x00, 0x80, 0x4f, 0x12, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x80, 0x4f,
                0x12, 0x00, 0x1a, 0x61, 0x00, 0x74, 0x00, 0x20, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x61, 0x00, 0x73,
                0x00, 0x74, 0x00, 0x20, 0x00, 0x31, 0x00, 0x30, 0x00, 0x20, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x64,
                0x00, 0x20, 0x00, 0x61, 0x00, 0x74, 0x00, 0x20, 0x00, 0x6d, 0x00, 0x6f, 0x00, 0x73, 0x00, 0x74,
                0x00, 0x20, 0x00, 0x32, 0x00, 0x30, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x03,
                0x00, 0xff, 0xff, 0x00, 0x00, 0x0c, 0x00, 0x43, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x6c, 0x65, 0x6d,
                0x65, 0x6e, 0x74, 0x90, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x01, 0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x80, 0xed, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.relevanceInSpecificRangeCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is RelevanceRangeParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! RelevanceRangeParameter
            XCTAssertEqual(10, condition.minimumRelevance)
            XCTAssertEqual(20, condition.maximumRelevance)
        }
        do {
            let file = try OutlookRules(data: Data([
                0x80, 0x4f, 0x12, 0x00, 0x80, 0x4f, 0x12, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x80, 0x4f,
                0x12, 0x00, 0x1a, 0x61, 0x00, 0x74, 0x00, 0x20, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x61, 0x00, 0x73,
                0x00, 0x74, 0x00, 0x20, 0x00, 0x31, 0x00, 0x30, 0x00, 0x20, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x64,
                0x00, 0x20, 0x00, 0x61, 0x00, 0x74, 0x00, 0x20, 0x00, 0x6d, 0x00, 0x6f, 0x00, 0x73, 0x00, 0x74,
                0x00, 0x20, 0x00, 0x32, 0x00, 0x30, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x03,
                0x00, 0xff, 0xff, 0x00, 0x00, 0x0c, 0x00, 0x43, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x6c, 0x65, 0x6d,
                0x65, 0x6e, 0x74, 0x90, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x01, 0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x80, 0xed, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.relevanceInSpecificRangeCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is RelevanceRangeParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! RelevanceRangeParameter
            XCTAssertEqual(0, condition.minimumRelevance)
            XCTAssertEqual(20, condition.maximumRelevance)
        }
    }

    func testSenderInSpecifiedAddressBookCondition() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x1D, 0x43, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x74, 0x00, 0x61, 0x00, 0x63, 0x00, 0x74,
                0x00, 0x73, 0x00, 0x20, 0x00, 0x28, 0x00, 0x54, 0x00, 0x68, 0x00, 0x69, 0x00, 0x73, 0x00, 0x20,
                0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x75, 0x00, 0x74, 0x00, 0x65, 0x00, 0x72,
                0x00, 0x20, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x6C, 0x00, 0x79, 0x00, 0x29, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xFB, 0x00, 0x00, 0x00, 0x04, 0x00, 0xFF, 0xFF, 0x00, 0x00, 0x0C, 0x00, 0x43, 0x52, 0x75,
                0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x80, 0x64, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x80, 0xF0, 0x00, 0x00,
                0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5A, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0xFE, 0x42, 0xAA, 0x0A, 0x18, 0xC7, 0x1A, 0x10, 0xE8, 0x85, 0x0B, 0x65, 0x1C, 0x24, 0x00,
                0x00, 0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x6F, 0xB8, 0xC2, 0x2A, 0x54, 0xBF,
                0x46, 0x8C, 0x79, 0x45, 0xF3, 0x8A, 0x29, 0xFA, 0x22, 0x00, 0x00, 0x00, 0x00, 0x59, 0xDA, 0x07,
                0x29, 0x9D, 0xAF, 0x5C, 0x4A, 0xB2, 0x0C, 0x8B, 0x81, 0xA7, 0x8C, 0x96, 0xC0, 0x01, 0x00, 0xB2,
                0xA9, 0x7E, 0x6D, 0x73, 0xAB, 0x95, 0x4D, 0xBB, 0x15, 0x55, 0xC1, 0x54, 0x72, 0xFC, 0xB1, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x1D, 0x43, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x74, 0x00,
                0x61, 0x00, 0x63, 0x00, 0x74, 0x00, 0x73, 0x00, 0x20, 0x00, 0x28, 0x00, 0x54, 0x00, 0x68, 0x00,
                0x69, 0x00, 0x73, 0x00, 0x20, 0x00, 0x63, 0x00, 0x6F, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x75, 0x00,
                0x74, 0x00, 0x65, 0x00, 0x72, 0x00, 0x20, 0x00, 0x6F, 0x00, 0x6E, 0x00, 0x6C, 0x00, 0x79, 0x00,
                0x29, 0x00, 0x01, 0x80, 0xEF, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x69, 0xC0, 0x06, 0x38, 0x4C, 0x63, 0x62, 0x47, 0xAE, 0xD8, 0xC2, 0x3C, 0xAE, 0xA4, 0xC6, 0x26,
                0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00

            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(2, file.rules[0].conditions.count)
            XCTAssertEqual(.senderInSpecifiedAddressBookCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is AddressBookParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! AddressBookParameter
            XCTAssertEqual("Contacts (This computer only)", condition.name)
            XCTAssertTrue(file.rules[0].conditions[1].parameter is ProfileStampParameter)
        }
    }

    func testWhichIsMeetingInvitationOrUpdateCondition() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xF1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.whichIsAMeetingInvitationOrInviteCondition, file.rules[0].conditions[0].identifier)
            XCTAssertEqual(0, file.rules[0].conditions[0].parameters.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
        }
    }

    func testFromRSSFeedsWithSpecifiedTextInTitleCondition() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x79, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xF5, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1A,
                0x49, 0x00, 0x53, 0x00, 0x53, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x6E, 0x00, 0x2D, 0x00, 0x4F, 0x00,
                0x72, 0x00, 0x62, 0x00, 0x69, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x74, 0x00, 0x61, 0x00,
                0x74, 0x00, 0x75, 0x00, 0x73, 0x00, 0x20, 0x00, 0x52, 0x00, 0x65, 0x00, 0x70, 0x00, 0x6F, 0x00,
                0x72, 0x00, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.fromRSSFeedsWithSpecifiedTextInTitleCondition, file.rules[0].conditions[0].identifier)
            XCTAssertEqual(1, file.rules[0].conditions[0].parameters.count)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is StringParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! StringParameter
            XCTAssertEqual("ISS On-Orbit Status Report", condition.value)
        }
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA2, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xF5, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1A,
                0x49, 0x00, 0x53, 0x00, 0x53, 0x00, 0x20, 0x00, 0x4F, 0x00, 0x6E, 0x00, 0x2D, 0x00, 0x4F, 0x00,
                0x72, 0x00, 0x62, 0x00, 0x69, 0x00, 0x74, 0x00, 0x20, 0x00, 0x53, 0x00, 0x74, 0x00, 0x61, 0x00,
                0x74, 0x00, 0x75, 0x00, 0x73, 0x00, 0x20, 0x00, 0x52, 0x00, 0x65, 0x00, 0x70, 0x00, 0x6F, 0x00,
                0x72, 0x00, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x4E, 0x00, 0x41, 0x00, 0x53, 0x00, 0x41,
                0x00, 0x20, 0x00, 0x42, 0x00, 0x72, 0x00, 0x65, 0x00, 0x61, 0x00, 0x6B, 0x00, 0x69, 0x00, 0x6E,
                0x00, 0x67, 0x00, 0x20, 0x00, 0x4E, 0x00, 0x65, 0x00, 0x77, 0x00, 0x73, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.fromRSSFeedsWithSpecifiedTextInTitleCondition, file.rules[0].conditions[0].identifier)
            XCTAssertEqual(2, file.rules[0].conditions[0].parameters.count)
            XCTAssertTrue(file.rules[0].conditions[0].parameters[0] is StringParameter)
            XCTAssertTrue(file.rules[0].conditions[0].parameters[1] is StringParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition1 = file.rules[0].conditions[0].parameters[0] as! StringParameter
            XCTAssertEqual("ISS On-Orbit Status Report", condition1.value)
            let condition2 = file.rules[0].conditions[0].parameters[1] as! StringParameter
            XCTAssertEqual("NASA Breaking News", condition2.value)
        }
    }

    func testSpecificInfoPathFormCondition() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x80, 0x4f, 0x12, 0x00, 0x80, 0x4f, 0x12, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x80, 0x4f,
                0x12, 0x00, 0x09, 0x54, 0x00, 0x65, 0x00, 0x6d, 0x00, 0x70, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x74,
                0x00, 0x65, 0x00, 0x33, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8a, 0x00, 0x00, 0x00, 0x03, 0x00, 0xff,
                0xff, 0x00, 0x00, 0x0c, 0x00, 0x43, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
                0x74, 0x90, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x01, 0x80, 0xf4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x09, 0x54, 0x00, 0x65, 0x00, 0x6d, 0x00, 0x70, 0x00, 0x6c, 0x00, 0x61, 0x00, 0x74, 0x00,
                0x65, 0x00, 0x33, 0x00, 0x32, 0x49, 0x50, 0x4d, 0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x50, 0x61, 0x74,
                0x68, 0x46, 0x6f, 0x72, 0x6d, 0x2e, 0x32, 0x35, 0x62, 0x63, 0x64, 0x34, 0x64, 0x30, 0x61, 0x30,
                0x39, 0x35, 0x33, 0x36, 0x31, 0x32, 0x24, 0x37, 0x35, 0x39, 0x66, 0x37, 0x35, 0x30, 0x33, 0x66,
                0x30, 0x37, 0x34, 0x36, 0x63, 0x63, 0x31, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.specificInfoPathFormCondition, file.rules[0].conditions[0].identifier)
            XCTAssertEqual(1, file.rules[0].conditions[0].parameters.count)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is FormTypeParameter)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)

            let condition = file.rules[0].conditions[0].parameter as! FormTypeParameter
            XCTAssertEqual("Template3", condition.name)
            XCTAssertEqual("IPM.InfoPathForm.25bcd4d0a0953612$759f7503f0746cc1", condition.className)
        }
    }

    func testFromAnyRSSFeedCondition() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x03, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xF7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.fromAnyRSSFeedCondition, file.rules[0].conditions[0].identifier)
            XCTAssertEqual(0, file.rules[0].conditions[0].parameters.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
        }
    }

    func testJunkCondition() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x3c, 0xd0, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0c, 0x4a, 0x75, 0x6e, 0x6b, 0x20, 0x53, 0x65, 0x6e, 0x64,
                0x65, 0x72, 0x73, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x03, 0x00, 0xff, 0xff, 0x00, 0x00, 0x0c, 0x00, 0x43, 0x52, 0x75, 0x6c, 0x65,
                0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x90, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x80, 0xeb, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x4a, 0x75, 0x6e, 0x6b, 0x20, 0x53, 0x65, 0x6e,
                0x64, 0x65, 0x72, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x93, 0x3e, 0xe9,
                0x05, 0x99, 0xe5, 0x40, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.junkCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is SendersListParameter)
            XCTAssertEqual("Junk Senders", (file.rules[0].conditions[0].parameter as! SendersListParameter).name)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
        }
    }

    func testAdultCondition() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x3c, 0xd0, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x15, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x20, 0x43, 0x6f, 0x6e,
                0x74, 0x65, 0x6e, 0x74, 0x20, 0x53, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x01, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0xff, 0xff,
                0x00, 0x00, 0x0c, 0x00, 0x43, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
                0x90, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x01, 0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00,
                0x00, 0x00, 0x01, 0x80, 0xec, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x15, 0x41, 0x64, 0x75, 0x6c, 0x74, 0x20, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x53,
                0x65, 0x6e, 0x64, 0x65, 0x72, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe9, 0x93,
                0x3e, 0xe9, 0x05, 0x99, 0xe5, 0x40, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.adultCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is SendersListParameter)
            XCTAssertEqual("Adult Content Senders", (file.rules[0].conditions[0].parameter as! SendersListParameter).name)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
        }
    }

    func testExceptionListCondition() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x3c, 0xd0, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e,
                0x20, 0x4c, 0x69, 0x73, 0x74, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x20, 0x00, 0x00, 0x00, 0x04, 0x00, 0xff, 0xff, 0x00, 0x00, 0x0c, 0x00, 0x43, 0x52, 0x75,
                0x6c, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x90, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x80, 0x64, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x80, 0xe9, 0x00, 0x00,
                0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74,
                0x69, 0x6f, 0x6e, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x01, 0x80, 0x43, 0x01, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb6, 0x60, 0x0b, 0xb6, 0xbd, 0xa7,
                0xe5, 0x40, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.exceptionListCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is SendersListParameter)
            XCTAssertEqual("Exception List", (file.rules[0].conditions[0].parameter as! SendersListParameter).name)
            XCTAssertEqual(1, file.rules[0].actions.count)
            XCTAssertEqual(.doNotSearchForCommercialOrAdultContentAction, file.rules[0].actions[0].identifier)
            XCTAssertEqual(0, file.rules[0].actions[0].parameters.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
        }
    }

    func testAlertCondition() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x80, 0x4f, 0x12, 0x00, 0x80, 0x4f, 0x12, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x80, 0x4f,
                0x12, 0x00, 0x31, 0x41, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x72, 0x00, 0x74, 0x00, 0x20, 0x00, 0x66,
                0x00, 0x72, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x20, 0x00, 0x22, 0x00, 0x48, 0x00, 0x6f, 0x00, 0x6d,
                0x00, 0x65, 0x00, 0x22, 0x00, 0x20, 0x00, 0x61, 0x00, 0x62, 0x00, 0x6f, 0x00, 0x75, 0x00, 0x74,
                0x00, 0x20, 0x00, 0x22, 0x00, 0x44, 0x00, 0x6f, 0x00, 0x63, 0x00, 0x75, 0x00, 0x6d, 0x00, 0x65,
                0x00, 0x6e, 0x00, 0x74, 0x00, 0x73, 0x00, 0x20, 0x00, 0x28, 0x00, 0x41, 0x00, 0x6c, 0x00, 0x6c,
                0x00, 0x20, 0x00, 0x43, 0x00, 0x68, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x65, 0x00, 0x73,
                0x00, 0x29, 0x00, 0x22, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf5, 0x00, 0x00, 0x00, 0x03, 0x00, 0xff,
                0xff, 0x00, 0x00, 0x0c, 0x00, 0x43, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
                0x74, 0x90, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01,
                0x00, 0x00, 0x00, 0x01, 0x80, 0xf3, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x58, 0x41, 0x00, 0x6c, 0x00, 0x65, 0x00, 0x72, 0x00, 0x74, 0x00, 0x20, 0x00, 0x66, 0x00,
                0x72, 0x00, 0x6f, 0x00, 0x6d, 0x00, 0x20, 0x00, 0x22, 0x00, 0x48, 0x00, 0x6f, 0x00, 0x6d, 0x00,
                0x65, 0x00, 0x22, 0x00, 0x20, 0x00, 0x61, 0x00, 0x62, 0x00, 0x6f, 0x00, 0x75, 0x00, 0x74, 0x00,
                0x20, 0x00, 0x22, 0x00, 0x44, 0x00, 0x6f, 0x00, 0x63, 0x00, 0x75, 0x00, 0x6d, 0x00, 0x65, 0x00,
                0x6e, 0x00, 0x74, 0x00, 0x73, 0x00, 0x20, 0x00, 0x28, 0x00, 0x41, 0x00, 0x6c, 0x00, 0x6c, 0x00,
                0x20, 0x00, 0x43, 0x00, 0x68, 0x00, 0x61, 0x00, 0x6e, 0x00, 0x67, 0x00, 0x65, 0x00, 0x73, 0x00,
                0x29, 0x00, 0x22, 0x00, 0x01, 0x00, 0x7b, 0x00, 0x31, 0x00, 0x44, 0x00, 0x37, 0x00, 0x45, 0x00,
                0x41, 0x00, 0x41, 0x00, 0x37, 0x00, 0x41, 0x00, 0x2d, 0x00, 0x42, 0x00, 0x31, 0x00, 0x30, 0x00,
                0x41, 0x00, 0x2d, 0x00, 0x34, 0x00, 0x38, 0x00, 0x35, 0x00, 0x44, 0x00, 0x2d, 0x00, 0x41, 0x00,
                0x38, 0x00, 0x45, 0x00, 0x39, 0x00, 0x2d, 0x00, 0x35, 0x00, 0x42, 0x00, 0x33, 0x00, 0x44, 0x00,
                0x36, 0x00, 0x31, 0x00, 0x31, 0x00, 0x35, 0x00, 0x39, 0x00, 0x37, 0x00, 0x45, 0x00, 0x31, 0x00,
                0x7d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x55, 0x55, 0xc2, 0xa7,
                0xe5, 0x40, 0x00, 0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(1, file.rules[0].conditions.count)
            XCTAssertEqual(.alertCondition, file.rules[0].conditions[0].identifier)
            XCTAssertTrue(file.rules[0].conditions[0].parameter is AlertParameter)
            XCTAssertEqual("Alert from \"Home\" about \"Documents (All Changes)\"\u{1}{1D7EAA7A-B10A-485D-A8E9-5B3D611597E1}", (file.rules[0].conditions[0].parameter as!AlertParameter).name)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
        }
    }

    func testMultipleConditions() throws {
        do {
            let file = try OutlookRules(data: Data([
                0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x14, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,
                0x14, 0x00, 0x08, 0x52, 0x00, 0x55, 0x00, 0x4C, 0x00, 0x45, 0x00, 0x4E, 0x00, 0x41, 0x00, 0x4D,
                0x00, 0x45, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4A, 0x00, 0x00, 0x00, 0x04, 0x00, 0xFF, 0xFF, 0x00,
                0x00, 0x0C, 0x00, 0x43, 0x52, 0x75, 0x6C, 0x65, 0x45, 0x6C, 0x65, 0x6D, 0x65, 0x6E, 0x74, 0x90,
                0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01,
                0x80, 0x64, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
                0x00, 0x01, 0x80, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x80, 0xC9, 0x00, 0x00,
                0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x43, 0x00, 0x3A, 0x00, 0x5C, 0x00, 0x50,
                0x00, 0x72, 0x00, 0x6F, 0x00, 0x67, 0x00, 0x72, 0x00, 0x61, 0x00, 0x6D, 0x00, 0x20, 0x00, 0x46,
                0x00, 0x69, 0x00, 0x6C, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x4D, 0x00, 0x69, 0x00, 0x63,
                0x00, 0x72, 0x00, 0x6F, 0x00, 0x73, 0x00, 0x6F, 0x00, 0x66, 0x00, 0x74, 0x00, 0x20, 0x00, 0x4F,
                0x00, 0x66, 0x00, 0x66, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x72, 0x00, 0x6F,
                0x00, 0x6F, 0x00, 0x74, 0x00, 0x5C, 0x00, 0x54, 0x00, 0x65, 0x00, 0x6D, 0x00, 0x70, 0x00, 0x6C,
                0x00, 0x61, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x5C, 0x00, 0x31, 0x00, 0x30, 0x00, 0x33,
                0x00, 0x33, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                0x00, 0x00, 0x00
            ]))
            XCTAssertEqual(1, file.rules.count)
            XCTAssertEqual(2, file.rules[0].conditions.count)
            XCTAssertEqual(.nameInToBoxCondition, file.rules[0].conditions[0].identifier)
            XCTAssertEqual(0, file.rules[0].conditions[0].parameters.count)
            XCTAssertEqual(.sentOnlyToMeCondition, file.rules[0].conditions[1].identifier)
            XCTAssertEqual(0, file.rules[0].conditions[1].parameters.count)
            XCTAssertEqual(0, file.rules[0].actions.count)
            XCTAssertEqual(0, file.rules[0].exceptions.count)
        }
    }

    static var allTests = [
        ("testFromCondition", testFromCondition),
        ("testSpecificWordsInSubjectCondition", testSpecificWordsInSubjectCondition),
        ("testThroughAccountCondition", testThroughAccountCondition),
        ("testSentOnlyToMeCondition", testSentOnlyToMeCondition),
        ("testNameInToBoxCondition", testNameInToBoxCondition),
        ("testImportance", testImportance),
        ("testSensitivityCondition", testSensitivityCondition),
        ("testFlaggedForActionCondition", testFlaggedForActionCondition),
        ("testNameInCcBoxCondition", testNameInCcBoxCondition),
        ("testNameInToOrCcBoxCondition", testNameInToOrCcBoxCondition),
        ("testNameNotInToBoxCondition", testNameNotInToBoxCondition),
        ("testToCondition", testSentToCondition),
        ("testSpecificWordsInBodyCondition", testSpecificWordsInBodyCondition),
        ("testSpecificWordsInSubjectOrBodyCondition", testSpecificWordsInSubjectOrBodyCondition),
        ("testSpecificWordsInMessageHeader", testSpecificWordsInMessageHeader),
        ("testSpecificWordsInSendersAddress", testSpecificWordsInSendersAddress),
        ("testSpecificWordsInRecipientsAddress", testSpecificWordsInRecipientsAddress),
        ("testAssignedToCategoryCondition", testAssignedToCategoryCondition),
        ("testWhichIsAnAutomaticReplyCondition", testWhichIsAnAutomaticReplyCondition),
        ("testHasAttachmentCondition", testHasAttachmentCondition),
        ("testSizeInSpecificRangeCondition", testSizeInSpecificRangeCondition),
        ("testReceivedInSpecificDateSpanCondition", testReceivedInSpecificDateSpanCondition),
        ("testUsesFormCondition", testUsesFormCondition),
        ("testWithSelectedPropertiesOfDocumentOrFormsCondition", testWithSelectedPropertiesOfDocumentOrFormsCondition),
        ("testWithRelevanceInSpecificRangeCondition", testWithRelevanceInSpecificRangeCondition),
        ("testSenderInSpecifiedAddressBookCondition", testSenderInSpecifiedAddressBookCondition),
        ("testWhichIsMeetingInvitationOrUpdateCondition", testWhichIsMeetingInvitationOrUpdateCondition),
        ("testFromRSSFeedsWithSpecifiedTextInTitleCondition", testFromRSSFeedsWithSpecifiedTextInTitleCondition),
        ("testFromAnyRSSFeedCondition", testFromAnyRSSFeedCondition),
        ("testSpecificInfoPathFormCondition", testSpecificInfoPathFormCondition),
        ("testJunkCondition", testJunkCondition),
        ("testAdultCondition", testAdultCondition),
        ("testExceptionListCondition", testExceptionListCondition),
        ("testAlertCondition", testAlertCondition),
        ("testMultipleConditions", testMultipleConditions),
    ]
}
